<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="Rackspace.CloudFiles.Specs/bin/Debug/Rackspace.CloudFiles.Specs.dll" total="72" failures="1" not-run="4" date="2009-12-10" time="14:08:47">
  <environment nunit-version="2.4.8.0" clr-version="2.0.50727.1433" os-version="Unix 10.2.0.0" platform="Unix" cwd="/Users/rsvihla/Projects/mono/csharp-cloudfiles" machine-name="ryan-svihlas-macbook-pro.local" user="rsvihla" user-domain="ryan-svihlas-macbook-pro.local" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="Rackspace.CloudFiles.Specs/bin/Debug/Rackspace.CloudFiles.Specs.dll" success="False" time="0.964" asserts="0">
    <results>
      <test-suite name="Rackspace" success="False" time="0.962" asserts="0">
        <results>
          <test-suite name="CloudFiles" success="False" time="0.962" asserts="0">
            <results>
              <test-suite name="Domain" success="True" time="0.245" asserts="0">
                <results>
                  <test-suite name="request" success="True" time="0.245" asserts="0">
                    <results>
                      <test-suite name="GetPublicContainersSpecs" success="True" time="0.245" asserts="0">
                        <results>
                          <test-suite name="when_getting_list_of_public_containers" success="True" time="0.227" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Domain.request.GetPublicContainersSpecs.when_getting_list_of_public_containers.should_have_a_http_get_method" executed="True" success="True" time="0.204" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Domain.request.GetPublicContainersSpecs.when_getting_list_of_public_containers.should_have_properly_formmated_request_url" executed="True" success="True" time="0.009" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="when_getting_list_of_public_containers_and_cdn_management_is_emptry_string" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Domain.request.GetPublicContainersSpecs.when_getting_list_of_public_containers_and_cdn_management_is_emptry_string.should_throw_argument_null_exception" executed="True" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_getting_list_of_public_containers_and_cdn_management_url_is_null" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Domain.request.GetPublicContainersSpecs.when_getting_list_of_public_containers_and_cdn_management_url_is_null.should_throw_argument_null_exception" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite name="Specs" success="False" time="0.707" asserts="0">
                <results>
                  <test-suite name="Domain" success="True" time="0.223" asserts="0">
                    <results>
                      <test-suite name="request" success="True" time="0.222" asserts="0">
                        <results>
                          <test-suite name="DeleteStorageObjectSpecs" success="True" time="0.065" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.DeleteStorageObjectSpecs.when_deleting_a_storage_item" executed="True" success="True" time="0.065" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="SetLoggingToContainerRequestSpec" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.SetLoggingToContainerRequestSpec.when_creating_the_uri" executed="False">
                                <reason>
                                  <message><![CDATA[Invalid SetUp method signature]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.SetLoggingToContainerRequestSpec.when_logging_is_not_set" executed="False">
                                <reason>
                                  <message><![CDATA[Invalid SetUp method signature]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.SetLoggingToContainerRequestSpec.when_logging_is_set" executed="False">
                                <reason>
                                  <message><![CDATA[Invalid SetUp method signature]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite name="When_getting_a_storage_item_and_providing_a_if_match_request_header" success="True" time="0.016" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_match_request_header.Should_add_if_match_request_field_header_to_request_successfully" executed="True" success="True" time="0.016" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="When_getting_a_storage_item_and_providing_a_if_modified_since_request_header" success="True" time="0.032" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_modified_since_request_header.Should_add_if_modified_since_request_field_to_request_ifmodifiedsince_property_successfully" executed="False">
                                <reason>
                                  <message><![CDATA[should write hand rolled mock]]></message>
                                </reason>
                              </test-case>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_modified_since_request_header.Should_throw_is_modified_since_header_exception_if_date_time_provided_is_not_even_a_date" executed="True" success="True" time="0.030" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="When_getting_a_storage_item_and_providing_a_if_none_match_request_header" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_none_match_request_header.Should_add_if_none_match_request_field_header_to_request_successfully" executed="True" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="When_getting_a_storage_item_and_providing_a_if_unmodified_since_request_header" success="True" time="0.010" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_unmodified_since_request_header.Should_add_if_unmodified_since_request_field_to_request_ifmodifiedsince_property_successfully" executed="True" success="True" time="0.005" asserts="1" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_if_unmodified_since_request_header.Should_throw_date_time_http_header_format_exception_if_date_time_provided_is_not_even_a_date" executed="True" success="True" time="0.004" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="When_getting_a_storage_item_and_providing_a_range_header" success="True" time="0.026" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_range_header.Should_have_a_negative_range_to_property_if_the_range_to_property_is_set_correctly_and_no_range_from_is_specified" executed="True" success="True" time="0.010" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_range_header.Should_have_a_range_from_property_if_the_range_from_property_is_set_correctly" executed="True" success="True" time="0.004" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_range_header.Should_have_range_from_and_range_to_if_both_are_set_and_are_valid_integers" executed="True" success="True" time="0.005" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.When_getting_a_storage_item_and_providing_a_range_header.Should_throw_invalid_range_exception_if_the_from_range_is_not_an_integer" executed="True" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_getting_information_of_a_storage_item" success="True" time="0.003" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_getting_information_of_a_storage_item.should_have_a_http_head_method" executed="True" success="True" time="0.002" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_getting_information_of_a_storage_item.should_have_properly_formmated_request_url" executed="True" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details" success="True" time="0.025" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_a_http_post_method" executed="True" success="True" time="0.014" asserts="0" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_cdn_enabled_in_the_headers" executed="True" success="True" time="0.002" asserts="1" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_properly_formmated_request_url" executed="True" success="True" time="0.000" asserts="1" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_ref_acl" executed="True" success="True" time="0.002" asserts="1" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_time_to_live_aka_ttl_in_the_headers" executed="True" success="True" time="0.002" asserts="1" />
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details.should_have_user_agent_acl" executed="True" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details_and_cdn_management_is_emptry_string" success="True" time="0.000" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details_and_cdn_management_is_emptry_string.should_throw_argument_null_exception" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details_and_cdn_management_url_is_null" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details_and_cdn_management_url_is_null.should_throw_argument_null_exception" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details_and_container_name_is_emptry_string" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details_and_container_name_is_emptry_string.should_throw_argument_null_exception" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details_and_container_name_is_null" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details_and_container_name_is_null.should_throw_argument_null_exception" executed="True" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite name="when_setting_public_container_details_and_container_ttl_is_less_than_zero" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Rackspace.CloudFiles.Specs.Domain.request.when_setting_public_container_details_and_container_ttl_is_less_than_zero.should_throw_argument_null_exception" executed="True" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenCreatingNewContainer" success="True" time="0.080" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenCreatingNewContainer.It_calls_the_storage_request_with_its_container_name" executed="True" success="True" time="0.059" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenCreatingNewContainer.it_gets_the_object_count_and_bytes_used" executed="True" success="True" time="0.010" asserts="2" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenCreatingNewContainer.it_sets_the_put_verb_on_the_request" executed="True" success="True" time="0.010" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenDeletingAContainerThatDoesNotExist" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenDeletingAContainerThatDoesNotExist.it_throws_ContainerNotFoundException" executed="True" success="True" time="0.006" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenDeletingAnExistingContainer" success="True" time="0.018" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenDeletingAnExistingContainer.It_calls_the_storage_request_with_its_container_name" executed="True" success="True" time="0.009" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenDeletingAnExistingContainer.it_sets_the_delete_verb_on_the_request" executed="True" success="True" time="0.008" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenDeletingAnExistingContainerAndItsNotEmpty" success="True" time="0.010" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenDeletingAnExistingContainerAndItsNotEmpty.it_will_throw_container_not_empty_exception" executed="True" success="True" time="0.010" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenGettingAContainerList" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAContainerList.it_should_return_all_containers_in_account" executed="True" success="True" time="0.035" asserts="7" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAContainerList.it_uses_a_format_of_xml" executed="True" success="True" time="0.010" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenGettingAContainerListAndLimitingResults" success="True" time="0.018" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAContainerListAndLimitingResults.it_uses_a_format_of_xml" executed="True" success="True" time="0.010" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAContainerListAndLimitingResults.it_will_not_allow_you_to_request_more_than_10000" executed="True" success="True" time="0.007" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenGettingAContainerThatDoesNotExist" success="True" time="0.007" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAContainerThatDoesNotExist.it_throws_ContainerNotFoundException" executed="True" success="True" time="0.006" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenGettingAnExistingContainer" success="True" time="0.029" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAnExistingContainer.It_calls_the_storage_request_with_its_container_name" executed="True" success="True" time="0.013" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAnExistingContainer.it_gets_the_object_count_and_bytes_used" executed="True" success="True" time="0.006" asserts="2" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenGettingAnExistingContainer.it_sets_the_head_verb_on_the_request" executed="True" success="True" time="0.008" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAccountWhenUsingContainerName" success="True" time="0.024" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenUsingContainerName.it_has_to_have_a_name_no_longer_than_256_bytes" executed="True" success="True" time="0.009" asserts="2" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenUsingContainerName.it_has_to_have_a_name_with_no_forwardslashes" executed="True" success="True" time="0.007" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAccountWhenUsingContainerName.it_has_to_have_a_name_with_no_questionmarks" executed="True" success="True" time="0.006" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecAuthenticateWhenCreatingAccountConnection" success="True" time="0.074" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.it_should_initalize_account_with_byte_used" executed="True" success="True" time="0.021" asserts="1" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.it_should_initialize_account_with_container_count" executed="True" success="True" time="0.006" asserts="1" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.it_should_submit_storage_url_on_account_creation" executed="True" success="True" time="0.007" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.it_should_use_head_method_on_account_creation" executed="True" success="True" time="0.007" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.its_authenticate_request_should_pass_apikey_in_headers" executed="True" success="True" time="0.006" asserts="1" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.its_authenticate_request_should_pass_username_in_headers" executed="True" success="True" time="0.006" asserts="1" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.its_authenticate_request_should_use_rackspace_authentication_url" executed="True" success="True" time="0.009" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecAuthenticateWhenCreatingAccountConnection.its_authenticate_request_should_use_the_get_method" executed="True" success="True" time="0.008" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="SpecContainerWhenGettingListOfObjects" success="False" time="0.083" asserts="0">
                    <results>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecContainerWhenGettingListOfObjects.it_returns_objects_from_response" executed="True" success="False" time="0.024" asserts="6">
                        <failure>
                          <message><![CDATA[  Expected: 2009-02-03 05:26:32.000
  But was:  2009-02-03 05:26:32.612
]]></message>
                          <stack-trace><![CDATA[at Rackspace.CloudFiles.Specs.SpecContainerWhenGettingListOfObjects.it_returns_objects_from_response () [0x0007b] in /Users/rsvihla/Projects/mono/csharp-cloudfiles/Rackspace.CloudFiles.Specs/SpecContainer.cs:67
at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[],System.Exception&)
at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000]
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="Rackspace.CloudFiles.Specs.SpecContainerWhenGettingListOfObjects.should_submit_storage_request_url_with_container_name" executed="True" success="True" time="0.009" asserts="0" />
                      <test-case name="Rackspace.CloudFiles.Specs.SpecContainerWhenGettingListOfObjects.should_use_get_method" executed="True" success="True" time="0.008" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite name="Utils" success="True" time="0.049" asserts="0">
                    <results>
                      <test-suite name="EnsureNotNullOrEmptyWhenStringsAreNull" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.EnsureNotNullOrEmptyWhenStringsAreNull.it_throws_EnsureException" executed="True" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_container_name_has_a_question_mark" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_container_name_has_a_question_mark.should_be_invalid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_container_name_has_a_slash" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_container_name_has_a_slash.should_be_invalid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_container_name_has_no_invalid_characters" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_container_name_has_no_invalid_characters.should_be_valid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_container_name_is_invalid_length" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_container_name_is_invalid_length.should_be_invalid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_container_name_is_valid_length" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_container_name_is_valid_length.should_be_valid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_object_name_has_a_question_mark" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_object_name_has_a_question_mark.should_be_invalid" executed="True" success="True" time="0.001" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_object_name_has_no_invalid_characters" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_object_name_has_no_invalid_characters.should_be_valid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_object_name_is_invalid_length" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_object_name_is_invalid_length.should_be_invalid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_a_object_name_is_valid_length" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_a_object_name_is_valid_length.should_be_valid" executed="True" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite name="When_accessing_the_description_attribute_of_an_enum" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.When_accessing_the_description_attribute_of_an_enum.Should_be_able_to_get_the_description_text" executed="True" success="True" time="0.001" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite name="when_capitalizing_a_string" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.when_capitalizing_a_string.should_capitalize_the_first_letter_and_lower_case_the_remainder_of_the_string" executed="True" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="when_converting_false_to_string_for_x_cdn_enabled_header" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.when_converting_false_to_string_for_x_cdn_enabled_header.should_result_in_False" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="when_converting_true_to_string_for_x_cdn_enabled_header" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.when_converting_true_to_string_for_x_cdn_enabled_header.should_result_in_True" executed="True" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="when_encoding_a_container_name_or_storage_item_for_a_url" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.when_encoding_a_container_name_or_storage_item_for_a_url.should_replace_plus_signs_with_percent_two_b" executed="True" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite name="when_stripping_a_slash_prefix_from_a_string" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="Rackspace.CloudFiles.Specs.Utils.when_stripping_a_slash_prefix_from_a_string.should_remove_the_slash_prefix" executed="True" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>